{"version":3,"sources":["webpack:///./src/utils/response.entity.ts"],"names":[],"mappings":";;;;;;;;;;;AAAa;AACb,8CAA8C,cAAc;AAC5D,iBAAiB,mBAAO,CAAC,sCAAgB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"main.f48f598abeadc40ce150.hot-update.js","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst common_1 = require(\"@nestjs/common\");\r\nclass LoginRequest {\r\n    constructor(userName, password) {\r\n        this.userName = userName;\r\n        this.password = password;\r\n    }\r\n}\r\nexports.LoginRequest = LoginRequest;\r\nclass ResponseEntity {\r\n    static failureWithMessage(message) {\r\n        let response = new ResponseEntity();\r\n        response.httpStatus = common_1.HttpStatus.FORBIDDEN;\r\n        response.responseObject = { message };\r\n        return response;\r\n    }\r\n    static successWithMessage(message) {\r\n        let response = new ResponseEntity();\r\n        response.httpStatus = common_1.HttpStatus.OK;\r\n        response.responseObject = { message };\r\n        return response;\r\n    }\r\n    static successWithAny(responseObject) {\r\n        let response = new ResponseEntity();\r\n        response.httpStatus = common_1.HttpStatus.OK;\r\n        response.responseObject = responseObject;\r\n        return response;\r\n    }\r\n    getStatus() {\r\n        return this.httpStatus;\r\n    }\r\n    getResponseObject() {\r\n        return this.responseObject;\r\n    }\r\n}\r\nexports.ResponseEntity = ResponseEntity;\r\nclass ResponseEntityFor {\r\n    static failureWith(t) {\r\n        let response = new ResponseEntityFor();\r\n        response.httpStatus = common_1.HttpStatus.FORBIDDEN;\r\n        response.responseObject = t;\r\n        return response;\r\n    }\r\n    static successWith(t) {\r\n        let response = new ResponseEntityFor();\r\n        response.httpStatus = common_1.HttpStatus.OK;\r\n        response.responseObject = t;\r\n        return response;\r\n    }\r\n    getStatus() {\r\n        return this.httpStatus;\r\n    }\r\n    getResponseObject() {\r\n        return this.responseObject;\r\n    }\r\n}\r\nexports.ResponseEntityFor = ResponseEntityFor;\r\n"],"sourceRoot":""}